
ADC_task01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000390  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000524  08000524  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000524  08000524  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000524  08000524  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000524  08000524  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000524  08000524  00001524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000528  08000528  00001528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800052c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000530  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000530  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005cb  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001aa  00000000  00000000  000025ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  000027b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000058  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011a5  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000062b  00000000  00000000  00003a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000049b9  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00008a11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000154  00000000  00000000  00008a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00008ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800050c 	.word	0x0800050c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800050c 	.word	0x0800050c

080001d4 <main>:
uint16_t Adc_Read_LM35(void);
void Delay_ms(volatile uint32_t ms);


int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

    uint16_t adc_val;

    // clock enable

    GPIOA_PCLK_EN();
 80001da:	4b19      	ldr	r3, [pc, #100]	@ (8000240 <main+0x6c>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001de:	4a18      	ldr	r2, [pc, #96]	@ (8000240 <main+0x6c>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB_PCLK_EN();
 80001e6:	4b16      	ldr	r3, [pc, #88]	@ (8000240 <main+0x6c>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ea:	4a15      	ldr	r2, [pc, #84]	@ (8000240 <main+0x6c>)
 80001ec:	f043 0302 	orr.w	r3, r3, #2
 80001f0:	6313      	str	r3, [r2, #48]	@ 0x30
    USART1_PCLK_EN();
 80001f2:	4b13      	ldr	r3, [pc, #76]	@ (8000240 <main+0x6c>)
 80001f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001f6:	4a12      	ldr	r2, [pc, #72]	@ (8000240 <main+0x6c>)
 80001f8:	f043 0310 	orr.w	r3, r3, #16
 80001fc:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC_PCLK_EN();
 80001fe:	4b10      	ldr	r3, [pc, #64]	@ (8000240 <main+0x6c>)
 8000200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000202:	4a0f      	ldr	r2, [pc, #60]	@ (8000240 <main+0x6c>)
 8000204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000208:	6453      	str	r3, [r2, #68]	@ 0x44

    Delay_ms(100);
 800020a:	2064      	movs	r0, #100	@ 0x64
 800020c:	f000 f916 	bl	800043c <Delay_ms>

    GPIO_Init();
 8000210:	f000 f818 	bl	8000244 <GPIO_Init>

    UART_Init();
 8000214:	f000 f858 	bl	80002c8 <UART_Init>

    Adc_Init();
 8000218:	f000 f8cc 	bl	80003b4 <Adc_Init>

    while (1)
    {
        adc_val = Adc_Read_LM35();   // print  the adc value
 800021c:	f000 f8e8 	bl	80003f0 <Adc_Read_LM35>
 8000220:	4603      	mov	r3, r0
 8000222:	80fb      	strh	r3, [r7, #6]

        UART_SendNumber(adc_val);    // send through UART
 8000224:	88fb      	ldrh	r3, [r7, #6]
 8000226:	4618      	mov	r0, r3
 8000228:	f000 f880 	bl	800032c <UART_SendNumber>
        UART_SendChar('\n');
 800022c:	200a      	movs	r0, #10
 800022e:	f000 f865 	bl	80002fc <UART_SendChar>

        Delay_ms(1000);
 8000232:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000236:	f000 f901 	bl	800043c <Delay_ms>
        adc_val = Adc_Read_LM35();   // print  the adc value
 800023a:	bf00      	nop
 800023c:	e7ee      	b.n	800021c <main+0x48>
 800023e:	bf00      	nop
 8000240:	40023800 	.word	0x40023800

08000244 <GPIO_Init>:
    }
}

void GPIO_Init(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0


    // PB6 = USART1_TX, PB7 = USART1_RX
    GPIOB->MODER &= ~((3U << 12) | (3U << 14)); // Clear mode
 8000248:	4b1d      	ldr	r3, [pc, #116]	@ (80002c0 <GPIO_Init+0x7c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a1c      	ldr	r2, [pc, #112]	@ (80002c0 <GPIO_Init+0x7c>)
 800024e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000252:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((2U << 12) | (2U << 14));  // Alternate function mode
 8000254:	4b1a      	ldr	r3, [pc, #104]	@ (80002c0 <GPIO_Init+0x7c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a19      	ldr	r2, [pc, #100]	@ (80002c0 <GPIO_Init+0x7c>)
 800025a:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800025e:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= ~((0xF << 24) | (0xF << 28)); // Clear AF
 8000260:	4b17      	ldr	r3, [pc, #92]	@ (80002c0 <GPIO_Init+0x7c>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a16      	ldr	r2, [pc, #88]	@ (80002c0 <GPIO_Init+0x7c>)
 8000266:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800026a:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= ((7 << 24) | (7 << 28));      // AF7 = USART1
 800026c:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <GPIO_Init+0x7c>)
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	4a13      	ldr	r2, [pc, #76]	@ (80002c0 <GPIO_Init+0x7c>)
 8000272:	f043 43ee 	orr.w	r3, r3, #1996488704	@ 0x77000000
 8000276:	6213      	str	r3, [r2, #32]

    // Optional: high speed & push-pull
    GPIOB->OSPEEDR |= ((3U << 12) | (3U << 14));   // High speed
 8000278:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <GPIO_Init+0x7c>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	4a10      	ldr	r2, [pc, #64]	@ (80002c0 <GPIO_Init+0x7c>)
 800027e:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000282:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~((1 << 6) | (1 << 7));     // Push-pull
 8000284:	4b0e      	ldr	r3, [pc, #56]	@ (80002c0 <GPIO_Init+0x7c>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a0d      	ldr	r2, [pc, #52]	@ (80002c0 <GPIO_Init+0x7c>)
 800028a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800028e:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR   &= ~((3U << 12) | (3U << 14)); // No pull-up/down
 8000290:	4b0b      	ldr	r3, [pc, #44]	@ (80002c0 <GPIO_Init+0x7c>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a0a      	ldr	r2, [pc, #40]	@ (80002c0 <GPIO_Init+0x7c>)
 8000296:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800029a:	60d3      	str	r3, [r2, #12]

    // PA0 = ADC input (analog)
    GPIOA->MODER |= (3U << 0);   // Analog mode
 800029c:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <GPIO_Init+0x80>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a08      	ldr	r2, [pc, #32]	@ (80002c4 <GPIO_Init+0x80>)
 80002a2:	f043 0303 	orr.w	r3, r3, #3
 80002a6:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << 0);  // No pull-up/down
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <GPIO_Init+0x80>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <GPIO_Init+0x80>)
 80002ae:	f023 0303 	bic.w	r3, r3, #3
 80002b2:	60d3      	str	r3, [r2, #12]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40020400 	.word	0x40020400
 80002c4:	40020000 	.word	0x40020000

080002c8 <UART_Init>:
// uart init
void UART_Init(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
    USART1->CR1 &= ~USART_CR1_UE;  // clear the uart
 80002ce:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <UART_Init+0x30>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	4a09      	ldr	r2, [pc, #36]	@ (80002f8 <UART_Init+0x30>)
 80002d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002d8:	60d3      	str	r3, [r2, #12]

    uint32_t divisor = F_CPU / BAUD_RATE;   // cpu - 16mhz and buad rate is 115200
 80002da:	238a      	movs	r3, #138	@ 0x8a
 80002dc:	607b      	str	r3, [r7, #4]
    USART1->BRR = divisor;                  // store the value
 80002de:	4a06      	ldr	r2, [pc, #24]	@ (80002f8 <UART_Init+0x30>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	6093      	str	r3, [r2, #8]

    USART1->CR1 = USART_CR1_UE | USART_CR1_TE;  // enable the UART and transmitter bit
 80002e4:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <UART_Init+0x30>)
 80002e6:	f242 0208 	movw	r2, #8200	@ 0x2008
 80002ea:	60da      	str	r2, [r3, #12]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40011000 	.word	0x40011000

080002fc <UART_SendChar>:

// uart send character
void UART_SendChar(char ch)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE)); // TXE wait for TXE = 1
 8000306:	bf00      	nop
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <UART_SendChar+0x2c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f9      	beq.n	8000308 <UART_SendChar+0xc>
    USART1->DR = ch;
 8000314:	4a04      	ldr	r2, [pc, #16]	@ (8000328 <UART_SendChar+0x2c>)
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	6053      	str	r3, [r2, #4]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40011000 	.word	0x40011000

0800032c <UART_SendNumber>:


// uart send number
void UART_SendNumber(uint16_t num)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	80fb      	strh	r3, [r7, #6]
    char digits[6];
    int i = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]

    if (num == 0)
 800033a:	88fb      	ldrh	r3, [r7, #6]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d11e      	bne.n	800037e <UART_SendNumber+0x52>
    {
        UART_SendChar('0');
 8000340:	2030      	movs	r0, #48	@ 0x30
 8000342:	f7ff ffdb 	bl	80002fc <UART_SendChar>
 8000346:	e02f      	b.n	80003a8 <UART_SendNumber+0x7c>
        return;
    }

    while (num > 0)
    {
        digits[i++] = (num % 10) + '0';
 8000348:	88fa      	ldrh	r2, [r7, #6]
 800034a:	4b19      	ldr	r3, [pc, #100]	@ (80003b0 <UART_SendNumber+0x84>)
 800034c:	fba3 1302 	umull	r1, r3, r3, r2
 8000350:	08d9      	lsrs	r1, r3, #3
 8000352:	460b      	mov	r3, r1
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	440b      	add	r3, r1
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	b29b      	uxth	r3, r3
 800035e:	b2da      	uxtb	r2, r3
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	1c59      	adds	r1, r3, #1
 8000364:	6179      	str	r1, [r7, #20]
 8000366:	3230      	adds	r2, #48	@ 0x30
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	3318      	adds	r3, #24
 800036c:	443b      	add	r3, r7
 800036e:	f803 2c10 	strb.w	r2, [r3, #-16]
        num /= 10;
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	4a0e      	ldr	r2, [pc, #56]	@ (80003b0 <UART_SendNumber+0x84>)
 8000376:	fba2 2303 	umull	r2, r3, r2, r3
 800037a:	08db      	lsrs	r3, r3, #3
 800037c:	80fb      	strh	r3, [r7, #6]
    while (num > 0)
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d1e1      	bne.n	8000348 <UART_SendNumber+0x1c>
    }

    for (int j = i - 1; j >= 0; j--)
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	3b01      	subs	r3, #1
 8000388:	613b      	str	r3, [r7, #16]
 800038a:	e00a      	b.n	80003a2 <UART_SendNumber+0x76>
        UART_SendChar(digits[j]);
 800038c:	f107 0208 	add.w	r2, r7, #8
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	4413      	add	r3, r2
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ffb0 	bl	80002fc <UART_SendChar>
    for (int j = i - 1; j >= 0; j--)
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	3b01      	subs	r3, #1
 80003a0:	613b      	str	r3, [r7, #16]
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	daf1      	bge.n	800038c <UART_SendNumber+0x60>
}
 80003a8:	3718      	adds	r7, #24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	cccccccd 	.word	0xcccccccd

080003b4 <Adc_Init>:

//adc init
void Adc_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
    pADC1->CR2 = 0;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <Adc_Init+0x38>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
    pADC1->SMPR2 |= (7 << 0);   // Channel 0 we are using PA0 - ch0
 80003c0:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <Adc_Init+0x38>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	691a      	ldr	r2, [r3, #16]
 80003c6:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <Adc_Init+0x38>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f042 0207 	orr.w	r2, r2, #7
 80003ce:	611a      	str	r2, [r3, #16]
    pADC1->CR2 |= (1 << 0);     // ADON  bit   enable the adc on
 80003d0:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <Adc_Init+0x38>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	689a      	ldr	r2, [r3, #8]
 80003d6:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <Adc_Init+0x38>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f042 0201 	orr.w	r2, r2, #1
 80003de:	609a      	str	r2, [r3, #8]
    Delay_ms(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 f82b 	bl	800043c <Delay_ms>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000000 	.word	0x20000000

080003f0 <Adc_Read_LM35>:

// adc read
uint16_t Adc_Read_LM35(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
    pADC1->SQR3 = 0;            // Channel 0
 80003f4:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <Adc_Read_LM35+0x48>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2200      	movs	r2, #0
 80003fa:	635a      	str	r2, [r3, #52]	@ 0x34
    pADC1->SQR1 = 0;            // 1 conversion single time
 80003fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <Adc_Read_LM35+0x48>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2200      	movs	r2, #0
 8000402:	62da      	str	r2, [r3, #44]	@ 0x2c
    pADC1->CR2 |= (1 << 30);    // Start conversion
 8000404:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <Adc_Read_LM35+0x48>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	689a      	ldr	r2, [r3, #8]
 800040a:	4b0b      	ldr	r3, [pc, #44]	@ (8000438 <Adc_Read_LM35+0x48>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000412:	609a      	str	r2, [r3, #8]
    while (!(pADC1->SR & (1 << 1)));
 8000414:	bf00      	nop
 8000416:	4b08      	ldr	r3, [pc, #32]	@ (8000438 <Adc_Read_LM35+0x48>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f003 0302 	and.w	r3, r3, #2
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0f8      	beq.n	8000416 <Adc_Read_LM35+0x26>
    return pADC1->DR;
 8000424:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <Adc_Read_LM35+0x48>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	b29b      	uxth	r3, r3
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000

0800043c <Delay_ms>:

// delay
void Delay_ms(volatile uint32_t ms)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < (ms * 4000); i++);
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	e002      	b.n	8000450 <Delay_ms+0x14>
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3301      	adds	r3, #1
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000456:	fb03 f202 	mul.w	r2, r3, r2
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	429a      	cmp	r2, r3
 800045e:	d8f4      	bhi.n	800044a <Delay_ms+0xe>
}
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
	...

08000470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	@ (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000474:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	@ (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	@ (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	@ (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	@ (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049e:	f000 f811 	bl	80004c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff fe97 	bl	80001d4 <main>

080004a6 <LoopForever>:

LoopForever:
  b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004b4:	0800052c 	.word	0x0800052c
  ldr r2, =_sbss
 80004b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004bc:	20000020 	.word	0x20000020

080004c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC_IRQHandler>
	...

080004c4 <__libc_init_array>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	4d0d      	ldr	r5, [pc, #52]	@ (80004fc <__libc_init_array+0x38>)
 80004c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000500 <__libc_init_array+0x3c>)
 80004ca:	1b64      	subs	r4, r4, r5
 80004cc:	10a4      	asrs	r4, r4, #2
 80004ce:	2600      	movs	r6, #0
 80004d0:	42a6      	cmp	r6, r4
 80004d2:	d109      	bne.n	80004e8 <__libc_init_array+0x24>
 80004d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000504 <__libc_init_array+0x40>)
 80004d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000508 <__libc_init_array+0x44>)
 80004d8:	f000 f818 	bl	800050c <_init>
 80004dc:	1b64      	subs	r4, r4, r5
 80004de:	10a4      	asrs	r4, r4, #2
 80004e0:	2600      	movs	r6, #0
 80004e2:	42a6      	cmp	r6, r4
 80004e4:	d105      	bne.n	80004f2 <__libc_init_array+0x2e>
 80004e6:	bd70      	pop	{r4, r5, r6, pc}
 80004e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ec:	4798      	blx	r3
 80004ee:	3601      	adds	r6, #1
 80004f0:	e7ee      	b.n	80004d0 <__libc_init_array+0xc>
 80004f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f6:	4798      	blx	r3
 80004f8:	3601      	adds	r6, #1
 80004fa:	e7f2      	b.n	80004e2 <__libc_init_array+0x1e>
 80004fc:	08000524 	.word	0x08000524
 8000500:	08000524 	.word	0x08000524
 8000504:	08000524 	.word	0x08000524
 8000508:	08000528 	.word	0x08000528

0800050c <_init>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr

08000518 <_fini>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr
